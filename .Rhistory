}
sietl.panel <- rp.control(data = data,
patient=1)
rp.slider(sietl.panel, variable = patient, 1, 4,
action = sietl.plot, labels = T,
"Сиэтлский опросник")
?floor
sietl.plot <- function(panel) {
# data <- data.frame(a=c(1,3,4,7,9, 88,3,4,4), b = c(1,1,1,2,2,2,3,3,3))
i <- floor(as.numeric(panel$patient))
plot(data[data[, 2] == i, 1])
panel
}
sietl.panel <- rp.control(data = data,
patient=1)
rp.slider(sietl.panel, variable = patient, 1, 4,
action = sietl.plot, labels = T,
"Сиэтлский опросник")
?rp.control
sietl.plot <- function(panel) {
# data <- data.frame(a=c(1,3,4,7,9, 88,3,4,4), b = c(1,1,1,2,2,2,3,3,3))
i <- floor(as.numeric(panel$patient))
plot(data[data[, 2] == i, 1])
panel
}
sietl.panel <- rp.control(data = data,
patient=c(1:4))
rp.slider(sietl.panel, variable = patient, 1, 4,
action = sietl.plot, labels = T,
"Сиэтлский опросник")
sietl.plot <- function(panel) {
# data <- data.frame(a=c(1,3,4,7,9, 88,3,4,4), b = c(1,1,1,2,2,2,3,3,3))
i <- floor(as.numeric(panel$patient))
plot(data[data[, 2] == i, 1])
panel
}
sietl.panel <- rp.control(data = data,
patient=c(1:4))
rp.slider(sietl.panel, variable = patient, 1, 4,
action = sietl.plot, showvalue = T, resolution=1,
"Сиэтлский опросник")
sietl.plot <- function(panel) {
i <- panel$patient
plot(data[data[, 2] == i, 1])
panel
}
sietl.panel <- rp.control(data = data,
patient=1)
rp.slider(sietl.panel, variable = patient, 1, 4,
action = sietl.plot, showvalue = T, resolution=1,
"Сиэтлский опросник")
sietl.plot <- function(panel) {
i <- panel$patient
plot(data[data[, 2] == i, 1])
panel
}
sietl.panel <- rp.control(data = data)
rp.slider(sietl.panel, variable = patient, 1, 3,
action = sietl.plot, showvalue = T, resolution=1,
"Сиэтлский опросник")
sietl.plot <- function(panel) {
i <- panel$patient
plot(data[data[, 2] == i, 1])
panel
}
sietl.panel <- rp.control(data = data, patient=1)
rp.slider(sietl.panel, variable = patient, 1, 3,
action = sietl.plot, showvalue = T, resolution=1,
"Сиэтлский опросник")
i=1
sietl.plot <- function(panel) {
i <- panel$patient
plot(data[data[, 2] == i, 1])
panel
}
sietl.panel <- rp.control(data = data, patient=1)
rp.slider(sietl.panel, variable = patient, 1, 3,
action = sietl.plot, showvalue = T, resolution=1,
"Сиэтлский опросник")
sietl.plot <- function(panel) {
panel$patient
plot(data[data$b == panel$patient, 1])
panel
}
sietl.panel <- rp.control(data = data, patient=1)
rp.slider(sietl.panel, variable = patient, 1, 3,
action = sietl.plot, showvalue = T, resolution=1,
"Сиэтлский опросник")
plot(data[data$b == 1, 1])
data$b == 1
data[data$b == 1, 1]
plot(data[data$b == 1, 1])
plot(data[data$b == 1, 1])
data[data$b == 1, 1]
plot(c(1,3,4))
plot(c(1,3,4))
library(rpanel)
data <- data.frame(a=c(1,3,4,7,9, 88,3,4,4), b = c(1,1,1,2,2,2,3,3,3))
data
plot(data[data$b == 1, 1])
sietl.plot <- function(panel) {
plot(data[data$b == panel$patient, 1])
panel
}
sietl.panel <- rp.control(data = data, patient=1)
rp.slider(sietl.panel, variable = patient, 1, 3,
action = sietl.plot, showvalue = T, resolution=1,
"Сиэтлский опросник")
sietl.plot <- function(panel) {
plot(data[data$b == panel$patient, 1])
panel
}
sietl.panel <- rp.control(data = data, patient=1)
rp.slider(sietl.panel, variable = patient, 1, 4,
action = sietl.plot, showvalue = T, resolution=1,
"Сиэтлский опросник")
sietl.plot <- function(panel) {
plot(data[data$b == panel$patient, 1])
panel
}
sietl.panel <- rp.control(data = data, patient=1)
#rp.slider(sietl.panel, variable = patient, 1, 3,
#          action = sietl.plot, showvalue = T, resolution=1,
#         "Сиэтлский опросник")
rp.doublebutton(sietl.panel, patient, step=1, initval=1,
range = c(1,4),
title = "Сиэтлский опросник", action = sietl.plot)
sietl.plot <- function(panel) {
plot(data[data$b == panel$patient, 1])
panel
}
sietl.panel <- rp.control(data = data, patient=1)
#rp.slider(sietl.panel, variable = patient, 1, 3,
#          action = sietl.plot, showvalue = T, resolution=1,
#         "Сиэтлский опросник")
rp.doublebutton(sietl.panel, patient, step=1, initval=1,
range = c(1,3),
title = "Сиэтлский опросник", action = sietl.plot)
library(rpanel)
data <- data.frame(a=c(1,3,4,7,9, 88,3,4,4), b = c(1,1,1,2,2,2,3,3,3))
data
sietl.plot <- function(panel) {
plot(data[data$b == panel$patient, 1])
panel
}
sietl.panel <- rp.control(data = data, patient=1)
#rp.slider(sietl.panel, variable = patient, 1, 3,
#          action = sietl.plot, showvalue = T, resolution=1,
#         "Сиэтлский опросник")
rp.doublebutton(sietl.panel, patient, step=1, initval=1,
range = c(1,3),
title = "Сиэтлский опросник", action = sietl.plot)
library(ggplot())
library(ggplot
)
library(ggplot2)
qplot(data[data$b == 1, 1])
qplot(~data[data$b == 1, 1])
qplot(data[data$b == 1, 1]~)
ggplot(data[data$b == 1, 1])
ggplot(data[data$b == 1, 1])
qplot(data[data$b == 1, 1])
qplot(y=data[data$b == 1, 1])
qplot(data[data$b == 1, 1], geom = "line")
qplot(data[data$b == 1, 1], geom = "bar")
qplot(data[data$b == 1, 1], geom = "bar", xlab="Визит")
sietl.plot <- function(panel) {
#plot(data[data$b == panel$patient, 1])
qplot(data[data$b == panel$patient, 1], geom = "bar", xlab="Визит")
panel
}
sietl.panel <- rp.control(data = data, patient=1)
#rp.slider(sietl.panel, variable = patient, 1, 3,
#          action = sietl.plot, showvalue = T, resolution=1,
#         "Сиэтлский опросник")
rp.doublebutton(sietl.panel, patient, step=1, initval=1,
range = c(1,3),
title = "Сиэтлский опросник", action = sietl.plot)
sietl.plot <- function(panel) {
#plot(data[data$b == panel$patient, 1])
qplot(data[data$b == panel$patient, 1], geom = "bar", xlab="Визит")
panel
}
sietl.panel <- rp.control(data = data, patient=1)
#rp.slider(sietl.panel, variable = patient, 1, 3,
#          action = sietl.plot, showvalue = T, resolution=1,
#         "Сиэтлский опросник")
rp.doublebutton(sietl.panel, patient, step=1, initval=1,
range = c(1,3),
title = "Сиэтлский опросник", action = sietl.plot)
sietl.plot <- function(panel) {
#plot(data[data$b == panel$patient, 1])
qplot(data[data$b == panel$patient, 1], geom = "auto", xlab="Визит")
panel
}
sietl.panel <- rp.control(data = data, patient=1)
#rp.slider(sietl.panel, variable = patient, 1, 3,
#          action = sietl.plot, showvalue = T, resolution=1,
#         "Сиэтлский опросник")
rp.doublebutton(sietl.panel, patient, step=1, initval=1,
range = c(1,3),
title = "Сиэтлский опросник", action = sietl.plot)
sietl.plot <- function(panel) {
plot(data[data$b == panel$patient, 1])
panel
}
sietl.panel <- rp.control(data = data, patient=1)
#rp.slider(sietl.panel, variable = patient, 1, 3,
#          action = sietl.plot, showvalue = T, resolution=1,
#         "Сиэтлский опросник")
rp.doublebutton(sietl.panel, patient, step=1, initval=1,
range = c(1,3),
title = "Сиэтлский опросник", action = sietl.plot)
data <- data.frame(a=c(1,3,4,7,9, 88,3,4,4), b = c(1,1,1,2,2,2,3,3,3))
data
sietl.plot <- function(panel) {
plot(data[data$b == panel$patient, 1])
panel
}
sietl.panel <- rp.control(data = data, patient=1)
#rp.slider(sietl.panel, variable = patient, 1, 3,
#          action = sietl.plot, showvalue = T, resolution=1,
#         "Сиэтлский опросник")
rp.doublebutton(sietl.panel, patient, step=1, initval=1,
range = c(1,3),
title = "Сиэтлский опросник", action = sietl.plot)
rp.doublebutton(sietl.panel, patient, step=1, initval=1,
range = c(1,3),
title = "Сиэтлский опросник", action = sietl.plot)
install.packages(c("arm", "broom", "caret", "checkmate", "devtools", "gdata", "Hmisc", "knitr", "manipulate", "mixOmics", "NLP", "pander", "plotrix", "psych", "Quandl", "Rcpp", "rgl", "rmarkdown", "stringr", "tm", "TSP", "VGAM"))
install.packages(c("manipulate", "pander"))
seq_along(c(10,20,30))
rep(c(1:10), each=50)
plot(rep(c(1:10), each=50))
require(mgcv)
require(nlme)
require(nlme)
library(RLRsim)
install.packages("RLRsim")
library(RLRsim)
library(RColorBrewer)
x1 <- 1:1000
x2 <- runif(1000,10,500)
fx1 <- -4*sin(x1/50)
fx2 <- -10*(x2)^(1/4)
y <- 60+ fx1 + fx2 + rnorm(1000,0,5)
test <- gamm(y~s(x1)+s(x2))
um <- smoothCon(s(x1),data=data.frame(x1=x1),
knots=NULL,absorb.cons=FALSE)
um
test$lme
extract.lmeDesign(test$lme)
X <- extract.lmeDesign(test$lme)$X
Z <- extract.lmeDesign(test$lme)$Z
Fcoef <- test$lme$coef$fixed
Fcoef
unlist(test$lme$coef$random)
plot(Xp[,2:10] %*% coef(test$gam)[2:10], type = "l")
Xp <- predict(test$gam, type = "lpmatrix")
Xp
plot(Xp[,2:10] %*% coef(test$gam)[2:10], type = "l")
um2 <- smoothCon(s(x1), data=data.frame(x1=x1), knots=NULL,
absorb.cons=TRUE)
layout(matrix(1:2, ncol = 2))
matplot(um2[[1]]$X, type = "l", main = "smoothCon()")
matplot(Xp[,2:10], type = "l", main = "Xp matrix") ##!##
layout(1)
head[Xp]
head(Xp)
head(Xp, 1)
x1[1]
x1[1:4]
install.packages("rms")
library(rms)
demo(all, 'rms')
f <- ols(y ~ rcs(x1, 3)
)
f
Formula(f)
Function(f)
latex(f)
x   <- c(0.2,   0.23,   0.26,   0.29,   0.33,   0.46,    0.53 )
y   <- c(0.211, 0.2026, 0.2034, 0.2167, 0.2177, 0.19225, 0.182)
f <- ols(y ~ rcs(x, 3))  # 2 d.f. for x
Function(f)  # represent fitted function in simplest R form
require("splines")
x   <- c(0.2,   0.23,   0.26,   0.29,   0.33,   0.46,    0.53 )
y   <- c(0.211, 0.2026, 0.2034, 0.2167, 0.2177, 0.19225, 0.182)
fit <- lm(y ~ ns(x,3))
summary(fit)
f <- lrm(y ~ rcs(x, 3))
f
Function(f)
citation()
citation("nlme")
citation()
citation()
citation("nlme")
citation("ggplot2")
citation("knitr")
library(igraph)
library(rgl)
g <-
read.graph("Dropbox/snapout/projects/data_shaped/te
stdata/aaronmase181114_2.g
raphml", "graphml")
rgl.open()
g <- read.graph("Dropbox/snapout/projects/data_shaped/testdata/aaronmase181114_2.graphml",
"graphml")
g <- read.graph("D:/graph/aaronmase181114_2.graphml",
"graphml")
g1 <-subgraph.edges(g, which(E(g) > 50), delete.vertices = TRUE)
rglplot.igraph(g1, edge.arrow.size=0, edge.arrow.width=0, vertex.label = NA,
layout = mylayout, edge.width=5)
rglplot.igraph(g1, edge.arrow.size=0, edge.arrow.width=0, vertex.label = NA,
layout = mylayout, edge.width=5)
rglplot(g1, edge.arrow.size=0, edge.arrow.width=0, vertex.label = NA,
layout = mylayout, edge.width=5)
rglplot(g1, edge.arrow.size=0, edge.arrow.width=0, vertex.label = NA,
edge.width=5)
rglplot(g1, edge.arrow.size=0, edge.arrow.width=0, vertex.label = NA,
edge.width=5)
suppressMessages(library(dplyr))
library(hflights)
data(hflights)
head(hflights)
install.packages("hflights")
data(hflights)
head(hflights)
library(hflights)
data(hflights)
head(hflights)
flights <- tbl_df(hflights)
flights
flights[flights$Month==1 & flights$DayofMonth==1, ]
filter(flights, Month==1, DayofMonth==1)
filter(flights, UniqueCarrier=="AA" | UniqueCarrier=="UA")
filter(flights, UniqueCarrier %in% c("AA", "UA"))
flights[, c("DepTime", "ArrTime", "FlightNum")]
select(flights, DepTime, ArrTime, FlightNum)
select(flights, Year:DayofMonth, contains("Taxi"), contains("Delay"))
select(flights, Year:Month, contains("Taxi"), contains("Delay"))
select(flights, Year:DayofMonth, contains("Taxi"), contains("Delay"))
filter(select(flights, UniqueCarrier, DepDelay), DepDelay > 60)
flights %>%
select(UniqueCarrier, DepDelay) %>%
filter(DepDelay > 60)
x1 <- 1:5; x2 <- 2:6
sqrt(sum((x1-x2)^2))
(x1-x2)^2 %>% sum() %>% sqrt()
flights[order(flights$DepDelay), c("UniqueCarrier", "DepDelay")]
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(DepDelay)
flights %>%
select(UniqueCarrier, DepDelay) %>%
arrange(desc(DepDelay))
flights$Speed <- flights$Distance / flights$AirTime*60
flights[, c("Distance", "AirTime", "Speed")]
flights <- flights %>% mutate(Speed = Distance/AirTime*60)
mutate(flights, Speed = Distance/AirTime*60)
head(with(flights, tapply(ArrDelay, Dest, mean, na.rm=TRUE)))
head(aggregate(ArrDelay ~ Dest, flights, mean))
flights %>%
group_by(Dest) %>%
summarise(avg_delay = mean(ArrDelay, na.rm=TRUE))
flights %>%
group_by(Dest) %>%
summarise(mean(ArrDelay, na.rm=TRUE))
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean), Cancelled, Diverted)
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(mean, sd), Cancelled, Diverted)
flights %>%
group_by(UniqueCarrier) %>%
summarise_each(funs(min(., na.rm=TRUE), max(., na.rm=TRUE)), matches("Delay"))
flights %>%
group_by(Month, DayofMonth) %>%
summarise(flight_count = n()) %>%
arrange(desc(flight_count))
flights %>%
group_by(Month, DayofMonth) %>%
tally(sort = TRUE)
View(flights)
flights %>%
group_by(Dest) %>%
summarise(flight_count = n(), plane_count = n_distinct(TailNum))
summarise(flight_count = n(), plane_count = n_distinct(TailNum))
flights %>%
group_by(Dest) %>%
select(Cancelled) %>%
table() %>%
head()
flights %>%
group_by(Dest) %>%
select(Cancelled) %>%
flights %>%
group_by(Dest) %>%
select(Cancelled)
flights %>%
group_by(Dest) %>%
select(Cancelled)
flights %>%
group_by(UniqueCarrier) %>%
select(Month, DayofMonth, DepDelay) %>%
filter(min_rank(desc(DepDelay)) <= 2) %>%
arrange(UniqueCarrier, desc(DepDelay))
suppressMessages(library(dplyr))
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights
flights %>% select(carrier, flight)
flights %>% select(-month, -day)
flights %>% select(-(dep_time:arr_delay))
flights %>% select(-contains("time"))
cols <- c("carrier", "flight", "tailnum")
flights %>% select(one_of(cols))
flights %>% select(tail = tailnum)
flights %>% rename(tail = tailnum)
flights %>% rename(tail = tailnum)
flights %>% filter(dep_time >= 600, dep_time <= 605)
flights %>% filter(between(dep_time, 600, 605))
flights %>% filter(!is.na(dep_time))
flights %>% filter(dep_time >= 600 || dep_time <= 605)
flights %>% filter(dep_time >= 700 || dep_time <= 605)
flights %>% slice(1000:1005)
flights %>% group_by(month, day) %>% slice(1:3)
flights %>% group_by(month, day) %>% sample_n(3)
flights %>% group_by(month, day) %>% top_n(3, dep_delay)
flights %>% group_by(month, day)
%>% top_n(3, dep_delay)
%>% arrange(desc(dep_delay))
flights %>% group_by(month, day) %>%
top_n(3, dep_delay) %>%
arrange(desc(dep_delay))
flights %>% select(origin, dest) %>% unique()
flights %>% select(origin, dest) %>% distinct()
flights %>% select(origin, dest) %>% distinct
flights %>% mutate(speed = distance/air_time*60)
str(flights)
flights %>% transmute(speed = distance/air_time*60)
flights %>% transmute(speed = distance/air_time*60)
mtcars %>% head()
mtcars %>% head()
mtcars %>% add_rownames("model") %>% head()
mtcars %>% tbl_df()
flights %>%
group_by(month) %>%
summarise(cnt = n())
flights %>% group_by(month) %>% tally()
flights %>% count(month)
flights %>%
group_by(month) %>%
summarise(cnt = n()) %>%
arrange(desc(cnt))
flights %>% group_by(month) %>% tally(sort=TRUE)
flights %>% count(month, sort=TRUE)
flights %>%
group_by(month) %>%
summarise(dist = sum(distance))
flights %>%
group_by(month) %>%
tally(wt = distance)
flights %>% count(month, wt = distance)
flights %>% group_by(month) %>% group_size()
flights %>% group_by(month) %>% n_groups()
flights %>%
group_by(month, day) %>%
summarise(cnt = n()) %>%
arrange(desc(cnt)) %>%
print(n = 40)
flights %>%
group_by(month, day) %>%
summarise(cnt = n()) %>%
ungroup() %>%
arrange(desc(cnt))
data_frame(a = 1:6, b = a*2, c = 'string', 'd+e' = 1) %>%
glimpse()
data.frame(a = 1:6, c = 'string', 'd+e' = 1) %>%
glimpse()
a <- data_frame(color = c("green","yellow","red"), num = 1:3)
b <- data_frame(color = c("green","yellow","pink"), size = c("S","M","L"))
a
b
(b <- data_frame(color = c("green","yellow","pink"), size = c("S","M","L")))
inner_join(a, b)
full_join(a, b)
left_join(a, b)
right_join(a, b)
left_join(b, a)
semi_join(a, b)
inner_join(a, b)
anti_join(a, b)
b <- b %>% rename(col = color)
inner_join(a, b, by=c("color" = "col"))
flights %>% print(n = 15)
flights %>% print(width = Inf)
flights %>% View()
plot(1:24)
install_github("smartinsightsfromdata/rpivotTable")
library(devtools)
plot(1:24)
library(devtools)
install_github("smartinsightsfromdata/rpivotTable")
library(rpivotTable)
data(mtcars)
rpivotTable(mtcars, rows="gear", col="cyl", aggregatorName="Average",
vals="mpg", rendererName="Treemap")
setwd("D:/GITHUB/dplyr_doc_ru")
